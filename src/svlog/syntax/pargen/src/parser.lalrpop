#![allow(deprecated)]
#![allow(unused_parens)]
use crate::ast;

grammar;

pub Grammar: ast::Grammar = {
    Comment <Nonterminal> => { let mut g = ast::Grammar::default(); g.nts.push(<>); g },
    <g:Grammar> Comment <r:Nonterminal> => { let mut g = g; g.nts.push(r); g },
};

Nonterminal: ast::Nonterminal = <public:("pub"?)> <name:Ident> "=" <choices:NonterminalChoices> ";" => {
    let public = public.is_some();
    let name = name.to_string();
    ast::Nonterminal { public, name, choices }
};

NonterminalChoices: Vec<Vec<ast::Symbol>> = {
    <Symbols> => vec![<>],
    "{" <Comma<Symbols>> "}" => <>,
};

Symbols: Vec<ast::Symbol> = {
    "null" => vec![],
    <Symbol+> => <>,
};

Symbol: ast::Symbol = {
    <Ident> => ast::Symbol::Token(<>.to_string()),
    "(" <Symbols> ")" => ast::Symbol::Group(<>),
    "(" <Symbols> <("|" <Symbols>)+> ")" => {
        let (head, mut tail) = (<>);
        tail.insert(0, head);
        ast::Symbol::Choice(tail)
    },
    <Symbol> "?" => ast::Symbol::Maybe(Box::new(<>)),
    <Symbol> "*" => ast::Symbol::Any(Box::new(<>)),
    <Symbol> "+" => ast::Symbol::Some(Box::new(<>)),
    <Symbol> "!" => ast::Symbol::Not(Box::new(<>)),
}

Ident = {
    r"[a-zA-Z0-9_]+",
    r"'[^']+'",
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

Comment: () = r"//.*"* => ();
